CREATE OR REPLACE TABLE `{staging_project}.{staging_dataset}.PACKDOWN_MODEL_DATA_STAGE01_INVENTORY`
PARTITION BY CAL_DT
--CLUSTER BY S
OPTIONS(expiration_timestamp=TIMESTAMP(DATE_ADD(CURRENT_DATE, INTERVAL 2 DAY)))
AS(
-- STAGE 1 INVENTORY

SELECT
 A. CAL_DT
, A. SKU_NBR
, A. SKU_CRT_DT
, A. STR_NBR
, A. SKU_STR_ID
, A. CURR_RETL_AMT
, OOS_IND
, SHELF_OUT
, SHELF_LOW
, BINARY_OH_LABEL
, MULTI_CLASS_LABEL
, LOG_INVENTORY_DOLLARS
, DATA_IND
, SUM(CASE WHEN B. PARTITIONDATE = A. CAL_DT THEN
        CASE WHEN B. SKU_VLCTY_CD = 'A' THEN 1
             WHEN B. SKU_VLCTY_CD = 'B' THEN 2
             WHEN B. SKU_VLCTY_CD = 'C' THEN 3
             WHEN B. SKU_VLCTY_CD = 'D' THEN 4
             ELSE 5 END
        END) SKU_VLCTY_CD
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 1 WEEK) THEN CURR_RETL_AMT ELSE NULL END) CURR_RETL_AMT_LW
, SUM(CASE WHEN B. PARTITIONDATE = A. CAL_DT THEN MIN_OH_QTY ELSE NULL END) MIN_OH_QTY
, SUM(CASE WHEN B. PARTITIONDATE = A. CAL_DT THEN LEAD_TM_DAYS + REV_TM_DAYS_CNT  ELSE NULL END) LEAD_TIME
, SUM(CASE WHEN B. PARTITIONDATE = A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) OH_QTY
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 1 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_1_DAY_OH
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 2 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_2_DAY_OH
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 3 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_3_DAY_OH
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 4 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_4_DAY_OH
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 5 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_5_DAY_OH
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 6 DAY) THEN RAW_OH_QTY ELSE NULL END) PREV_6_DAY_OH
, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 89 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) R13_AVG_OH_PER_DAY
, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 364 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) R12_AVG_OH_PER_DAY


, SUM(CASE WHEN B. PARTITIONDATE = A. CAL_DT THEN OO_QTY ELSE NULL END) OO_QTY
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 1 DAY) THEN OO_QTY ELSE NULL END) PREV_1_DAY_OO
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 2 DAY) THEN OO_QTY ELSE NULL END) PREV_2_DAY_OO
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 3 DAY) THEN OO_QTY ELSE NULL END) PREV_3_DAY_OO
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 4 DAY) THEN OO_QTY ELSE NULL END) PREV_4_DAY_OO
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 5 DAY) THEN OO_QTY ELSE NULL END) PREV_5_DAY_OO
, SUM(CASE WHEN B. PARTITIONDATE = DATE_SUB(A. CAL_DT, INTERVAL 6 DAY) THEN OO_QTY ELSE NULL END) PREV_6_DAY_OO

, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 6 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END)  R1_WEEK_AVG_OH_PER_DAY
, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 13 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) R2_WEEK_AVG_OH_PER_DAY
, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 20 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) R3_WEEK_AVG_OH_PER_DAY
, AVG(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 27 DAY) AND A. CAL_DT THEN RAW_OH_QTY ELSE NULL END) R4_WEEK_AVG_OH_PER_DAY

# SALES DATA
, DATE_DIFF(A. CAL_DT, IFNULL(MAX(CASE WHEN B. PARTITIONDATE >= DATE_SUB(A. CAL_DT, INTERVAL 89 DAY) AND B. GROSS_UNT_SLS > 0 THEN B. PARTITIONDATE END), DATE_SUB(A. CAL_DT, INTERVAL 90 DAY)), DAY) DAYS_SINCE_LAST_SALE
, SUM(CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 454 DAY) AND DATE_SUB(A. CAL_DT, INTERVAL 365 DAY) AND B. GROSS_UNT_SLS=0 THEN 1 ELSE 0 END) NBR_DAYS_ZERO_SLS
, COUNT(DISTINCT CASE WHEN B. PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 454 DAY) AND DATE_SUB(A. CAL_DT, INTERVAL 365 DAY) THEN B. PARTITIONDATE END) NBR_DAYS


FROM `{staging_project}.{staging_dataset}.TRAIN_DATA_DATES` A
INNER JOIN (
            SELECT
            PARTITIONDATE
            , CONCAT(CAST(SKU_NBR AS STRING),'-', CAST(SKU_CRT_DT AS STRING), '-', STR_NBR) AS SKU_STR_ID
            , RAW_OH_QTY
            , OO_QTY
            , MIN_OH_QTY
            , LEAD_TM_DAYS
            , REV_TM_DAYS_CNT
            , GROSS_UNT_SLS
            , SKU_VLCTY_CD
            FROM `{edw_project}.{edw_dataset_schn_inv}.STR_SKU_ACINV_DLY`
            WHERE PARTITIONDATE >= DATE_SUB(CURRENT_DATE, INTERVAL 3 YEAR)
        ) B
  ON A. SKU_STR_ID = B. SKU_STR_ID
  AND PARTITIONDATE BETWEEN DATE_SUB(A. CAL_DT, INTERVAL 2 YEAR) AND A. CAL_DT


--WHERE A. STR_NBR = '0233'
GROUP BY
        CAL_DT
      , SKU_NBR
      , SKU_CRT_DT
      , STR_NBR
      , SKU_STR_ID
      , CURR_RETL_AMT
      , OOS_IND
      , SHELF_OUT
      , SHELF_LOW
      , BINARY_OH_LABEL, MULTI_CLASS_LABEL
      , LOG_INVENTORY_DOLLARS
      , DATA_IND

);